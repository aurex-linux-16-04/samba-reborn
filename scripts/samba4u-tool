#!/bin/bash
# Sorry, bash required in order to use $RANDOM ...


BASE_DN=""
GROUPS_DN=""
USERS_DN=""
LDIF_FILE=""
GROUPS_BLOCKED="::"
USERS_BLOCKED="::"
S4_BASE_DN=""
S4_USER_DN=""
S4_MKPASSWD="samba4u-mkpasswd"

STUDENTS_CSV=""
TEACHERS_CSV=""
PASSWD_LOG=""

TEACHERS_ID="501"
STUDENTS_ID="502"
SECRETAR_ID="503"
CONSERJE_ID="504"

#format -> login:passwd:date

# search for configuration file
CFG_FILE="samba4u.cfg"

[ -r "$CFG_FILE" ] || exit 100
. "./$CFG_FILE"

touch "$PASSWD_LOG"
chmod 600 "$PASSWD_LOG"

GROUPS_LOG="$(tempfile)"
USERS_LOG="$(tempfile)"
for f in $GROUPS_LOG $USERS_LOG; do
	:> $f
done

die(){
	echo "$1"
	exit 1
}

gen_random_number(){
	printf "%03d" $(($RANDOM % 1000))
}
gen_random_pass(){
	# $1 -> login
	echo "${1}-$(gen_random_number)"
}
get_second_field_csv(){
	sed -ne "/^\"$1\"/{s%^[^,]\+,\"%%;s%\".*$%%;p}" "$2"
}

user_getpass(){
	logname="$1"
	gidnumber="$2"
	new_pass=""
	case "$gidnumber" in
		501)
			new_pass="$(get_second_field_csv "$logname" "$TEACHERS_CSV")"
			;;
		502)
			new_pass="$(get_second_field_csv "$logname" "$STUDENTS_CSV")"
			;;
	esac
	if [ -z "$new_pass" ] ; then
		# search in log
		new_pass="$(sed -ne "/^$logname:/{s%^[^:]\+:%%;s%:.*$%%;p}" "$PASSWD_LOG")"
	fi
	if [ -z "$new_pass" ] ; then
		# generate random pass
		new_pass="$(gen_random_pass "$logname")"
		# write it in log file
		echo "$logname:$new_pass:$(date "+%F")" >> "$PASSWD_LOG"
	fi
	echo "$new_pass"
}

gid_get_name(){
	gid_number="$1"
	gid_get_attr "$gid_number" "name"
}
gid_get_groupid(){
	gid_number="$1"
	gid_get_attr "$gid_number" "objectSid"| sed -e "s%^.*-%%"
}

gid_get_attr(){
	gid_number="$1"
	attr_name="$2"
	ldbsearch -H "/var/lib/samba/private/sam.ldb" --controls "search_options:0:1" -b $S4_BASE_DN "(&(gidNumber=$gid_number)(objectClass=posixGroup))" | sed -ne "/^$attr_name:/s%^.*: %%p"
}

group_list(){
	sed -ne "/^dn:.*,$GROUPS_DN$/{s%^.*cn=%%;s%,.*%%;p}" $LDIF_FILE
}

group_get_attr(){
	group_name="$1"
	attr_name="$2"
	sed -ne "/^dn: cn=$group_name,$GROUPS_DN$/,/^dn:/p" $LDIF_FILE |sed -ne "/^$attr_name:/{s%^.*: %%;p}"
}
group_get_gid(){
	group_name="$1"
	group_get_attr "$group_name" gidNumber
}
group_get_members(){
	group_name="$1"
	group_get_attr "$group_name" memberUid
}

s4group_add(){
	group_name="$1"
	rc=0
	samba-tool group add "$group_name" 2>/dev/null || rc=$?
	if [ $rc -ne 255 ] && [ $rc -ne 0 ]; then
		return 1
	fi
	rc=0
	if ! ldbsearch -H "/var/lib/samba/private/sam.ldb" --controls "search_options:0:1" -b $S4_BASE_DN "cn=$group_name" gidNumber | grep -q "^gidNumber:" ; then
		gid="$(group_get_gid "$group_name")"
		group_dn="$(ldbsearch -H "/var/lib/samba/private/sam.ldb" -b $S4_BASE_DN "(&(cn=$group_name)(objectclass=group))" dn |sed -ne "/^dn:/s%^dn: %%p")"
		tmpfile="$(tempfile)"
		cat << EOF > $tmpfile
dn: $group_dn
changetype: modify
add:objectclass
objectclass: posixGroup
-
add:gidnumber
gidnumber: ${gid}
EOF
		ldbmodify --url=/var/lib/samba/private/sam.ldb $tmpfile >/dev/null || rc=$?
		rm -f "$tmpfile"
	fi
	return $rc
}

#user's functions

user_list (){
#	sed -ne "/^dn:.*,$USERS_DN$/{s%^.*uid=%%;s%,.*%%;p}" $LDIF_FILE
	sed -ne "/^dn: .*,$USERS_DN$/,/^uid:/p" $LDIF_FILE | sed -ne "/^uid: /s%^.* %%p"
}
user_get_attr(){
	user_name="$1"
	attr_name="$2"
	user_dn="$(sed -ne "1,/^uid: $user_name/p" $LDIF_FILE |grep "^dn: " |tail -1)"
	#sed -ne "/^dn: uid=$user_name,$USERS_DN$/,/^dn:/p" $LDIF_FILE |sed -ne "/^$attr_name:/{s%^.* %%;p}"
	sed -ne "/^$user_dn$/,/^dn: /p" $LDIF_FILE |sed -ne "/^$attr_name:/{s%^.*: %%;p}"
	
}


s4user_add (){
	user_name="$1"
	given_name="$(user_get_attr "$user_name" "givenName")"
	sn="$(user_get_attr "$user_name" "sn")"
	gecos="$(user_get_attr "$user_name" "gecos")"
	[ "$gecos" ] || gecos="$given_name  $sn"
	mail_address="$(user_get_attr "$user_name" "mail")"
	home_drive="$(user_get_attr "$user_name" "sambaHomeDrive")"
	uidNumber="$(user_get_attr "$user_name" "uidNumber")"
	gidNumber="$(user_get_attr "$user_name" "gidNumber")"
	homeDirectory="$(user_get_attr "$user_name" "homeDirectory")"
	employeeNumber="$(user_get_attr "$user_name" "employeeNumber")"

	case "$gidNumber" in
		501)
			#TEACHERS_ID="501"
			scriptPath="profesores.vbs"
			;;
		502)
			#STUDENTS_ID="502"
			scriptPath="alumnos.vbs"
			;;
		503)
			#SECRETAR_ID="503"
			scriptPath="secretaria.vbs"
			;;
		504)	#CONSERJE_ID="504"
			scriptPath="consergeria.vbs"
			;;
		*)
			scriptPath="other.vbs"
			;;
	esac			

	MAIL_OPTION=""
	if [ "$mail_address" ] ; then
		MAIL_OPTION="--mail-address=$mail_address"
	fi
	rc=0
	#samba-tool user add "$user_name" --random-password --given-name="$given_name" $MAIL_OPTION --home-drive="$home_drive" 2> /dev/null || rc=$?
	#samba-tool user add "$user_name" --random-password $MAIL_OPTION --home-drive="$home_drive" 2> /dev/null || rc=$?
	#samba-tool user add "$user_name" --use-username-as-cn --random-password $MAIL_OPTION --home-drive="$home_drive" --home-directory="\\\estaminas\\$user_name" --given-name="$given_name" --surname="$sn" --unix-home="$homeDirectory" --login-shell="/bin/bash" --uid-number="$uidNumber" --gid-number="$gidNumber" --gecos="$gecos" --uid="$user_name" 2> /dev/null || rc=$?

	samba-tool user add "$user_name" --use-username-as-cn --random-password $MAIL_OPTION --home-drive="$home_drive" --home-directory="$homeDirectory" --given-name="$given_name" --surname="$sn" --unix-home="$homeDirectory" --login-shell="/bin/bash" --uid-number="$uidNumber" --gid-number="$gidNumber" --gecos="$gecos" --uid="$user_name" --script-path="$scriptPath" 2> /dev/null || rc=$?
	tmpfile="$(tempfile)"
	if [ $rc -eq 0 ] ; then
		PASSWORD="$(user_getpass "$user_name" "$gidNumber")"
		samba-tool user setpassword "$user_name" --newpassword=$PASSWORD || true
		if [ "$employeeNumber" ] ; then
			cat << EOF > $tmpfile
dn: cn=$user_name,$S4_USER_DN
changetype: modify
-
add:employeeNumber
employeeNumber: $employeeNumber
EOF
			ldbmodify --url=/var/lib/samba/private/sam.ldb -b $S4_BASE_DN $tmpfile >/dev/null || rc=2
			rm -f "$tmpfile"
		fi
		
	elif [ $rc -ne 255 ] ; then
		return 1
	fi
	rc=0
	cat << EOF > $tmpfile
dn: cn=$user_name,$S4_USER_DN
changetype: modify
-
replace:homeDirectory
homeDirectory: $homeDirectory
-
replace:scriptPath
scriptPath: $scriptPath
EOF
	ldbmodify --url=/var/lib/samba/private/sam.ldb -b $S4_BASE_DN $tmpfile >/dev/null || rc=2
	rm -f "$tmpfile"

	samba-tool user setexpiry "$user_name" --noexpiry || rc=2
	[ $rc -eq 0 ] || return $rc

#	# copiamos password del ldap viejo
#	ntpasswd="$(user_get_attr "$user_name" "sambaNTPassword")"
#	
#	cat << EOF > $tmpfile
#dn: cn=$user_name,$S4_USER_DN
#changetype: modify
#replace: unicodePwd
#unicodePwd:: $($S4_MKPASSWD $ntpasswd) 
#EOF
#	ldbmodify --url=/var/lib/samba/private/sam.ldb --controls=local_oid:1.3.6.1.4.1.7165.4.3.12:0 -b $S4_BASE_DN $tmpfile >/dev/null || rc=3
	rm -f "$tmpfile"
	return $rc
}


s4add_members(){
	group_name="$1"
	users_file="$2"
	rc=0
	tmpfile="$(tempfile)"
	echo -n $USERS_BLOCKED |sed -e "s%^:%%;s%:$%%"|tr ":" "\n" > $tmpfile

	user_list="$(group_get_attr "$group_name" memberUid | grep -vFf $tmpfile | grep -Ff "$users_file" |tr "\n" ","| sed s%,$%%)"

	if [ "$user_list" ] ; then
#	        tfile="$(tempfile)"
#		echo "$user_list" |tr " " "\n" |sed -e "s%^%dn: cn=%;s%$%,$S4_USER_DN%;achangetype: modify\nreplace: primarygroupid\nprimarygroupid: $ausiasprimaryid\n" > "$tfile"
#		ldbmodify --url=/var/lib/samba/private/sam.ldb -b $S4_BASE_DN $tfile >/dev/null || rc=2
#	        rm -f "$tfile"

		samba-tool group addmembers "$group_name" "$user_list" || rc=$?
	else
		rc=1
	fi
		rm -f $tmpfile
	return $rc
}

update_teachers(){
	[ "$TEACHERS_CSV" ] || return 1
	:> "$TEACHERS_CSV"
	ssh root@fsserver /home/depinf/ausias-user-manager/remote-csv-teachers > "$TEACHERS_CSV" || return 1
	[ -s "$TEACHERS_CSV" ] || return 1
}
update_students(){
	[ "$STUDENTS_CSV" ] || return 1
	:> "$STUDENTS_CSV"
	ssh root@fsserver /home/depinf/ausias-user-manager/remote-csv-students > "$STUDENTS_CSV" || return 1
	[ -s "$STUDENTS_CSV" ] || return 1
}

update_ldif(){
	[ "$LDIF_FILE" ] || return 1
	:> "$LDIF_FILE"
	ssh root@fsserver /home/depinf/ausias-user-manager/remote-slapcat > "$LDIF_FILE" || return 1
	[ -s "$LDIF_FILE" ] || return 1
}

# main program

[ $(id -u ) -eq 0 ] || die "You must be root"
[ "$HOME" ] || export HOME="/root"
update_teachers || die "Error updating teachers csv"
update_students || die "Error updating teachers csv"
update_ldif || die "Error updating teachers csv"

# get primary group for windows users
# Warning!!: group "ausias users" must exists (just for windows, not linux) before running this script!!!!
ausiasgid="$(wbinfo --group-info "ausias users" |cut -f 3 -d :)"
ausiasprimaryid="$(wbinfo --gid-to-sid "$ausiasgid" |cut -d "-" -f 8)"

# Add groups old ldap groups to s4
group_list | while read g; do
	if ! echo "$GROUPS_BLOCKED" | grep -q ":$g:" ; then
		rc=0
		s4group_add "$g"  || rc=$?
		if [ $rc -eq 0 ] ; then
			echo "Group $g: added"
			echo "$g" >> $GROUPS_LOG
		else
			echo "==> ERROR adding group: $g ($rc)" >&2
		fi
	fi
done

# Add users from old ldap to s4
samba-tool domain passwordsettings set --complexity=off --history-length=0 --min-pwd-age=0 --max-pwd-age=0
#samba-tool domain passwordsettings set --min-pwd-length=0

user_list | while read u; do
	if ! echo "$USERS_BLOCKED" | grep -q ":$u:" ; then
		rc=0
		s4user_add "$u" || rc=$?
		if [ $rc -eq 0 ] ; then
			echo "User $u: added"
			echo "$u" >> $USERS_LOG
		else
			echo "==> ERROR adding user: $u ($rc)" >&2
		fi
	fi
done
#samba-tool domain passwordsettings set --complexity=on

# Add group members to s4 
VALID_USERS="$(tempfile)"
wbinfo -u  |sed -e "s%^.*\\\%%" > "$VALID_USERS"

group_list | while read g; do
	if ! echo "$GROUPS_BLOCKED" | grep -q ":$g:" ; then
		rc=0
		s4add_members "$g" "$VALID_USERS" || rc=$?
		case "$rc" in
			1)
				echo "No members for $g"
				;;
			0)
				echo "Members of $g: added"
				;;
			*)
				echo "==> ERROR adding members of group: $g ($rc)" >&2
		esac
	fi
done
rm -f "$VALID_USERS"
echo "Import finished at $(date -R)"
# clean
# find users not added in this run and remove them ¿?
# ok, but only for students
echo "Eliminando alumnos no importados"
getent group alumnos |cut -d : -f 4 |tr "," "\n" |while read u; do 
	grep -qFx "$u" $USERS_LOG || samba-tool user delete "$u" || true
done
rm -f "$USERS_LOG"
rm -f "$GROUPS_LOG"
# find groups not added in this run and remove them ¿?
